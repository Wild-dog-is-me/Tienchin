{
  "version": 3,
  "sources": ["../../echarts/lib/data/DataDiffer.js", "../../echarts/lib/data/helper/dimensionHelper.js", "../../echarts/lib/data/SeriesDimensionDefine.js", "../../echarts/lib/data/SeriesData.js", "../../zrender/lib/contain/polygon.js", "../../echarts/lib/coord/geo/Region.js", "../../echarts/lib/coord/geo/parseGeoJson.js"],
  "sourcesContent": ["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nfunction dataIndexMapValueLength(valNumOrArrLengthMoreThan2) {\n  return valNumOrArrLengthMoreThan2 == null ? 0 : valNumOrArrLengthMoreThan2.length || 1;\n}\n\nfunction defaultKeyGetter(item) {\n  return item;\n}\n\nvar DataDiffer =\n/** @class */\nfunction () {\n  /**\r\n   * @param context Can be visited by this.context in callback.\r\n   */\n  function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context, // By default: 'oneToOne'.\n  diffMode) {\n    this._old = oldArr;\n    this._new = newArr;\n    this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\n    this._newKeyGetter = newKeyGetter || defaultKeyGetter; // Visible in callback via `this.context`;\n\n    this.context = context;\n    this._diffModeMultiple = diffMode === 'multiple';\n  }\n  /**\r\n   * Callback function when add a data\r\n   */\n\n\n  DataDiffer.prototype.add = function (func) {\n    this._add = func;\n    return this;\n  };\n  /**\r\n   * Callback function when update a data\r\n   */\n\n\n  DataDiffer.prototype.update = function (func) {\n    this._update = func;\n    return this;\n  };\n  /**\r\n   * Callback function when update a data and only work in `cbMode: 'byKey'`.\r\n   */\n\n\n  DataDiffer.prototype.updateManyToOne = function (func) {\n    this._updateManyToOne = func;\n    return this;\n  };\n  /**\r\n   * Callback function when update a data and only work in `cbMode: 'byKey'`.\r\n   */\n\n\n  DataDiffer.prototype.updateOneToMany = function (func) {\n    this._updateOneToMany = func;\n    return this;\n  };\n  /**\r\n   * Callback function when update a data and only work in `cbMode: 'byKey'`.\r\n   */\n\n\n  DataDiffer.prototype.updateManyToMany = function (func) {\n    this._updateManyToMany = func;\n    return this;\n  };\n  /**\r\n   * Callback function when remove a data\r\n   */\n\n\n  DataDiffer.prototype.remove = function (func) {\n    this._remove = func;\n    return this;\n  };\n\n  DataDiffer.prototype.execute = function () {\n    this[this._diffModeMultiple ? '_executeMultiple' : '_executeOneToOne']();\n  };\n\n  DataDiffer.prototype._executeOneToOne = function () {\n    var oldArr = this._old;\n    var newArr = this._new;\n    var newDataIndexMap = {};\n    var oldDataKeyArr = new Array(oldArr.length);\n    var newDataKeyArr = new Array(newArr.length);\n\n    this._initIndexMap(oldArr, null, oldDataKeyArr, '_oldKeyGetter');\n\n    this._initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter');\n\n    for (var i = 0; i < oldArr.length; i++) {\n      var oldKey = oldDataKeyArr[i];\n      var newIdxMapVal = newDataIndexMap[oldKey];\n      var newIdxMapValLen = dataIndexMapValueLength(newIdxMapVal); // idx can never be empty array here. see 'set null' logic below.\n\n      if (newIdxMapValLen > 1) {\n        // Consider there is duplicate key (for example, use dataItem.name as key).\n        // We should make sure every item in newArr and oldArr can be visited.\n        var newIdx = newIdxMapVal.shift();\n\n        if (newIdxMapVal.length === 1) {\n          newDataIndexMap[oldKey] = newIdxMapVal[0];\n        }\n\n        this._update && this._update(newIdx, i);\n      } else if (newIdxMapValLen === 1) {\n        newDataIndexMap[oldKey] = null;\n        this._update && this._update(newIdxMapVal, i);\n      } else {\n        this._remove && this._remove(i);\n      }\n    }\n\n    this._performRestAdd(newDataKeyArr, newDataIndexMap);\n  };\n  /**\r\n   * For example, consider the case:\r\n   * oldData: [o0, o1, o2, o3, o4, o5, o6, o7],\r\n   * newData: [n0, n1, n2, n3, n4, n5, n6, n7, n8],\r\n   * Where:\r\n   *     o0, o1, n0 has key 'a' (many to one)\r\n   *     o5, n4, n5, n6 has key 'b' (one to many)\r\n   *     o2, n1 has key 'c' (one to one)\r\n   *     n2, n3 has key 'd' (add)\r\n   *     o3, o4 has key 'e' (remove)\r\n   *     o6, o7, n7, n8 has key 'f' (many to many, treated as add and remove)\r\n   * Then:\r\n   *     (The order of the following directives are not ensured.)\r\n   *     this._updateManyToOne(n0, [o0, o1]);\r\n   *     this._updateOneToMany([n4, n5, n6], o5);\r\n   *     this._update(n1, o2);\r\n   *     this._remove(o3);\r\n   *     this._remove(o4);\r\n   *     this._remove(o6);\r\n   *     this._remove(o7);\r\n   *     this._add(n2);\r\n   *     this._add(n3);\r\n   *     this._add(n7);\r\n   *     this._add(n8);\r\n   */\n\n\n  DataDiffer.prototype._executeMultiple = function () {\n    var oldArr = this._old;\n    var newArr = this._new;\n    var oldDataIndexMap = {};\n    var newDataIndexMap = {};\n    var oldDataKeyArr = [];\n    var newDataKeyArr = [];\n\n    this._initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, '_oldKeyGetter');\n\n    this._initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter');\n\n    for (var i = 0; i < oldDataKeyArr.length; i++) {\n      var oldKey = oldDataKeyArr[i];\n      var oldIdxMapVal = oldDataIndexMap[oldKey];\n      var newIdxMapVal = newDataIndexMap[oldKey];\n      var oldIdxMapValLen = dataIndexMapValueLength(oldIdxMapVal);\n      var newIdxMapValLen = dataIndexMapValueLength(newIdxMapVal);\n\n      if (oldIdxMapValLen > 1 && newIdxMapValLen === 1) {\n        this._updateManyToOne && this._updateManyToOne(newIdxMapVal, oldIdxMapVal);\n        newDataIndexMap[oldKey] = null;\n      } else if (oldIdxMapValLen === 1 && newIdxMapValLen > 1) {\n        this._updateOneToMany && this._updateOneToMany(newIdxMapVal, oldIdxMapVal);\n        newDataIndexMap[oldKey] = null;\n      } else if (oldIdxMapValLen === 1 && newIdxMapValLen === 1) {\n        this._update && this._update(newIdxMapVal, oldIdxMapVal);\n        newDataIndexMap[oldKey] = null;\n      } else if (oldIdxMapValLen > 1 && newIdxMapValLen > 1) {\n        this._updateManyToMany && this._updateManyToMany(newIdxMapVal, oldIdxMapVal);\n        newDataIndexMap[oldKey] = null;\n      } else if (oldIdxMapValLen > 1) {\n        for (var i_1 = 0; i_1 < oldIdxMapValLen; i_1++) {\n          this._remove && this._remove(oldIdxMapVal[i_1]);\n        }\n      } else {\n        this._remove && this._remove(oldIdxMapVal);\n      }\n    }\n\n    this._performRestAdd(newDataKeyArr, newDataIndexMap);\n  };\n\n  DataDiffer.prototype._performRestAdd = function (newDataKeyArr, newDataIndexMap) {\n    for (var i = 0; i < newDataKeyArr.length; i++) {\n      var newKey = newDataKeyArr[i];\n      var newIdxMapVal = newDataIndexMap[newKey];\n      var idxMapValLen = dataIndexMapValueLength(newIdxMapVal);\n\n      if (idxMapValLen > 1) {\n        for (var j = 0; j < idxMapValLen; j++) {\n          this._add && this._add(newIdxMapVal[j]);\n        }\n      } else if (idxMapValLen === 1) {\n        this._add && this._add(newIdxMapVal);\n      } // Support both `newDataKeyArr` are duplication removed or not removed.\n\n\n      newDataIndexMap[newKey] = null;\n    }\n  };\n\n  DataDiffer.prototype._initIndexMap = function (arr, // Can be null.\n  map, // In 'byKey', the output `keyArr` is duplication removed.\n  // In 'byIndex', the output `keyArr` is not duplication removed and\n  //     its indices are accurately corresponding to `arr`.\n  keyArr, keyGetterName) {\n    var cbModeMultiple = this._diffModeMultiple;\n\n    for (var i = 0; i < arr.length; i++) {\n      // Add prefix to avoid conflict with Object.prototype.\n      var key = '_ec_' + this[keyGetterName](arr[i], i);\n\n      if (!cbModeMultiple) {\n        keyArr[i] = key;\n      }\n\n      if (!map) {\n        continue;\n      }\n\n      var idxMapVal = map[key];\n      var idxMapValLen = dataIndexMapValueLength(idxMapVal);\n\n      if (idxMapValLen === 0) {\n        // Simple optimize: in most cases, one index has one key,\n        // do not need array.\n        map[key] = i;\n\n        if (cbModeMultiple) {\n          keyArr.push(key);\n        }\n      } else if (idxMapValLen === 1) {\n        map[key] = [idxMapVal, i];\n      } else {\n        idxMapVal.push(i);\n      }\n    }\n  };\n\n  return DataDiffer;\n}();\n\nexport default DataDiffer;", "\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport { each, createHashMap, assert, map } from 'zrender/lib/core/util.js';\nimport { VISUAL_DIMENSIONS } from '../../util/types.js';\n\nvar DimensionUserOuput =\n/** @class */\nfunction () {\n  function DimensionUserOuput(encode, dimRequest) {\n    this._encode = encode;\n    this._schema = dimRequest;\n  }\n\n  DimensionUserOuput.prototype.get = function () {\n    return {\n      // Do not generate full dimension name until fist used.\n      fullDimensions: this._getFullDimensionNames(),\n      encode: this._encode\n    };\n  };\n  /**\r\n   * Get all data store dimension names.\r\n   * Theoretically a series data store is defined both by series and used dataset (if any).\r\n   * If some dimensions are omitted for performance reason in `this.dimensions`,\r\n   * the dimension name may not be auto-generated if user does not specify a dimension name.\r\n   * In this case, the dimension name is `null`/`undefined`.\r\n   */\n\n\n  DimensionUserOuput.prototype._getFullDimensionNames = function () {\n    if (!this._cachedDimNames) {\n      this._cachedDimNames = this._schema ? this._schema.makeOutputDimensionNames() : [];\n    }\n\n    return this._cachedDimNames;\n  };\n\n  return DimensionUserOuput;\n}();\n\n;\nexport function summarizeDimensions(data, schema) {\n  var summary = {};\n  var encode = summary.encode = {};\n  var notExtraCoordDimMap = createHashMap();\n  var defaultedLabel = [];\n  var defaultedTooltip = [];\n  var userOutputEncode = {};\n  each(data.dimensions, function (dimName) {\n    var dimItem = data.getDimensionInfo(dimName);\n    var coordDim = dimItem.coordDim;\n\n    if (coordDim) {\n      if (process.env.NODE_ENV !== 'production') {\n        assert(VISUAL_DIMENSIONS.get(coordDim) == null);\n      }\n\n      var coordDimIndex = dimItem.coordDimIndex;\n      getOrCreateEncodeArr(encode, coordDim)[coordDimIndex] = dimName;\n\n      if (!dimItem.isExtraCoord) {\n        notExtraCoordDimMap.set(coordDim, 1); // Use the last coord dim (and label friendly) as default label,\n        // because when dataset is used, it is hard to guess which dimension\n        // can be value dimension. If both show x, y on label is not look good,\n        // and conventionally y axis is focused more.\n\n        if (mayLabelDimType(dimItem.type)) {\n          defaultedLabel[0] = dimName;\n        } // User output encode do not contain generated coords.\n        // And it only has index. User can use index to retrieve value from the raw item array.\n\n\n        getOrCreateEncodeArr(userOutputEncode, coordDim)[coordDimIndex] = data.getDimensionIndex(dimItem.name);\n      }\n\n      if (dimItem.defaultTooltip) {\n        defaultedTooltip.push(dimName);\n      }\n    }\n\n    VISUAL_DIMENSIONS.each(function (v, otherDim) {\n      var encodeArr = getOrCreateEncodeArr(encode, otherDim);\n      var dimIndex = dimItem.otherDims[otherDim];\n\n      if (dimIndex != null && dimIndex !== false) {\n        encodeArr[dimIndex] = dimItem.name;\n      }\n    });\n  });\n  var dataDimsOnCoord = [];\n  var encodeFirstDimNotExtra = {};\n  notExtraCoordDimMap.each(function (v, coordDim) {\n    var dimArr = encode[coordDim];\n    encodeFirstDimNotExtra[coordDim] = dimArr[0]; // Not necessary to remove duplicate, because a data\n    // dim canot on more than one coordDim.\n\n    dataDimsOnCoord = dataDimsOnCoord.concat(dimArr);\n  });\n  summary.dataDimsOnCoord = dataDimsOnCoord;\n  summary.dataDimIndicesOnCoord = map(dataDimsOnCoord, function (dimName) {\n    return data.getDimensionInfo(dimName).storeDimIndex;\n  });\n  summary.encodeFirstDimNotExtra = encodeFirstDimNotExtra;\n  var encodeLabel = encode.label; // FIXME `encode.label` is not recommanded, because formatter can not be set\n  // in this way. Use label.formatter instead. May be remove this approach someday.\n\n  if (encodeLabel && encodeLabel.length) {\n    defaultedLabel = encodeLabel.slice();\n  }\n\n  var encodeTooltip = encode.tooltip;\n\n  if (encodeTooltip && encodeTooltip.length) {\n    defaultedTooltip = encodeTooltip.slice();\n  } else if (!defaultedTooltip.length) {\n    defaultedTooltip = defaultedLabel.slice();\n  }\n\n  encode.defaultedLabel = defaultedLabel;\n  encode.defaultedTooltip = defaultedTooltip;\n  summary.userOutput = new DimensionUserOuput(userOutputEncode, schema);\n  return summary;\n}\n\nfunction getOrCreateEncodeArr(encode, dim) {\n  if (!encode.hasOwnProperty(dim)) {\n    encode[dim] = [];\n  }\n\n  return encode[dim];\n} // FIXME:TS should be type `AxisType`\n\n\nexport function getDimensionTypeByAxis(axisType) {\n  return axisType === 'category' ? 'ordinal' : axisType === 'time' ? 'time' : 'float';\n}\n\nfunction mayLabelDimType(dimType) {\n  // In most cases, ordinal and time do not suitable for label.\n  // Ordinal info can be displayed on axis. Time is too long.\n  return !(dimType === 'ordinal' || dimType === 'time');\n} // function findTheLastDimMayLabel(data) {\n//     // Get last value dim\n//     let dimensions = data.dimensions.slice();\n//     let valueType;\n//     let valueDim;\n//     while (dimensions.length && (\n//         valueDim = dimensions.pop(),\n//         valueType = data.getDimensionInfo(valueDim).type,\n//         valueType === 'ordinal' || valueType === 'time'\n//     )) {} // jshint ignore:line\n//     return valueDim;\n// }", "\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\n\nvar SeriesDimensionDefine =\n/** @class */\nfunction () {\n  /**\r\n   * @param opt All of the fields will be shallow copied.\r\n   */\n  function SeriesDimensionDefine(opt) {\n    /**\r\n     * The format of `otherDims` is:\r\n     * ```js\r\n     * {\r\n     *     tooltip?: number\r\n     *     label?: number\r\n     *     itemName?: number\r\n     *     seriesName?: number\r\n     * }\r\n     * ```\r\n     *\r\n     * A `series.encode` can specified these fields:\r\n     * ```js\r\n     * encode: {\r\n     *     // \"3, 1, 5\" is the index of data dimension.\r\n     *     tooltip: [3, 1, 5],\r\n     *     label: [0, 3],\r\n     *     ...\r\n     * }\r\n     * ```\r\n     * `otherDims` is the parse result of the `series.encode` above, like:\r\n     * ```js\r\n     * // Suppose the index of this data dimension is `3`.\r\n     * this.otherDims = {\r\n     *     // `3` is at the index `0` of the `encode.tooltip`\r\n     *     tooltip: 0,\r\n     *     // `3` is at the index `1` of the `encode.label`\r\n     *     label: 1\r\n     * };\r\n     * ```\r\n     *\r\n     * This prop should never be `null`/`undefined` after initialized.\r\n     */\n    this.otherDims = {};\n\n    if (opt != null) {\n      zrUtil.extend(this, opt);\n    }\n  }\n\n  return SeriesDimensionDefine;\n}();\n\n;\nexport default SeriesDimensionDefine;", "\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/* global Int32Array */\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport Model from '../model/Model.js';\nimport DataDiffer from './DataDiffer.js';\nimport { DefaultDataProvider } from './helper/dataProvider.js';\nimport { summarizeDimensions } from './helper/dimensionHelper.js';\nimport SeriesDimensionDefine from './SeriesDimensionDefine.js';\nimport { SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ORIGINAL } from '../util/types.js';\nimport { convertOptionIdName, isDataItemOption } from '../util/model.js';\nimport { setCommonECData } from '../util/innerStore.js';\nimport { isSourceInstance } from './Source.js';\nimport DataStore from './DataStore.js';\nimport { isSeriesDataSchema } from './helper/SeriesDataSchema.js';\nvar isObject = zrUtil.isObject;\nvar map = zrUtil.map;\nvar CtorInt32Array = typeof Int32Array === 'undefined' ? Array : Int32Array; // Use prefix to avoid index to be the same as otherIdList[idx],\n// which will cause weird udpate animation.\n\nvar ID_PREFIX = 'e\\0\\0';\nvar INDEX_NOT_FOUND = -1; // type SeriesDimensionIndex = DimensionIndex;\n\nvar TRANSFERABLE_PROPERTIES = ['hasItemOption', '_nameList', '_idList', '_invertedIndicesMap', '_dimSummary', 'userOutput', '_rawData', '_dimValueGetter', '_nameDimIdx', '_idDimIdx', '_nameRepeatCount'];\nvar CLONE_PROPERTIES = ['_approximateExtent']; // -----------------------------\n// Internal method declarations:\n// -----------------------------\n\nvar prepareInvertedIndex;\nvar getId;\nvar getIdNameFromStore;\nvar normalizeDimensions;\nvar transferProperties;\nvar cloneListForMapAndSample;\nvar makeIdFromName;\n\nvar SeriesData =\n/** @class */\nfunction () {\n  /**\r\n   * @param dimensionsInput.dimensions\r\n   *        For example, ['someDimName', {name: 'someDimName', type: 'someDimType'}, ...].\r\n   *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius\r\n   */\n  function SeriesData(dimensionsInput, hostModel) {\n    this.type = 'list';\n    this._dimOmitted = false;\n    this._nameList = [];\n    this._idList = []; // Models of data option is stored sparse for optimizing memory cost\n    // Never used yet (not used yet).\n    // private _optionModels: Model[] = [];\n    // Global visual properties after visual coding\n\n    this._visual = {}; // Globel layout properties.\n\n    this._layout = {}; // Item visual properties after visual coding\n\n    this._itemVisuals = []; // Item layout properties after layout\n\n    this._itemLayouts = []; // Graphic elemnents\n\n    this._graphicEls = []; // key: dim, value: extent\n\n    this._approximateExtent = {};\n    this._calculationInfo = {}; // Having detected that there is data item is non primitive type\n    // (in type `OptionDataItemObject`).\n    // Like `data: [ { value: xx, itemStyle: {...} }, ...]`\n    // At present it only happen in `SOURCE_FORMAT_ORIGINAL`.\n\n    this.hasItemOption = false; // Methods that create a new list based on this list should be listed here.\n    // Notice that those method should `RETURN` the new list.\n\n    this.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'lttbDownSample', 'map']; // Methods that change indices of this list should be listed here.\n\n    this.CHANGABLE_METHODS = ['filterSelf', 'selectRange'];\n    this.DOWNSAMPLE_METHODS = ['downSample', 'lttbDownSample'];\n    var dimensions;\n    var assignStoreDimIdx = false;\n\n    if (isSeriesDataSchema(dimensionsInput)) {\n      dimensions = dimensionsInput.dimensions;\n      this._dimOmitted = dimensionsInput.isDimensionOmitted();\n      this._schema = dimensionsInput;\n    } else {\n      assignStoreDimIdx = true;\n      dimensions = dimensionsInput;\n    }\n\n    dimensions = dimensions || ['x', 'y'];\n    var dimensionInfos = {};\n    var dimensionNames = [];\n    var invertedIndicesMap = {};\n    var needsHasOwn = false;\n    var emptyObj = {};\n\n    for (var i = 0; i < dimensions.length; i++) {\n      // Use the original dimensions[i], where other flag props may exists.\n      var dimInfoInput = dimensions[i];\n      var dimensionInfo = zrUtil.isString(dimInfoInput) ? new SeriesDimensionDefine({\n        name: dimInfoInput\n      }) : !(dimInfoInput instanceof SeriesDimensionDefine) ? new SeriesDimensionDefine(dimInfoInput) : dimInfoInput;\n      var dimensionName = dimensionInfo.name;\n      dimensionInfo.type = dimensionInfo.type || 'float';\n\n      if (!dimensionInfo.coordDim) {\n        dimensionInfo.coordDim = dimensionName;\n        dimensionInfo.coordDimIndex = 0;\n      }\n\n      var otherDims = dimensionInfo.otherDims = dimensionInfo.otherDims || {};\n      dimensionNames.push(dimensionName);\n      dimensionInfos[dimensionName] = dimensionInfo;\n\n      if (emptyObj[dimensionName] != null) {\n        needsHasOwn = true;\n      }\n\n      if (dimensionInfo.createInvertedIndices) {\n        invertedIndicesMap[dimensionName] = [];\n      }\n\n      if (otherDims.itemName === 0) {\n        this._nameDimIdx = i;\n      }\n\n      if (otherDims.itemId === 0) {\n        this._idDimIdx = i;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        zrUtil.assert(assignStoreDimIdx || dimensionInfo.storeDimIndex >= 0);\n      }\n\n      if (assignStoreDimIdx) {\n        dimensionInfo.storeDimIndex = i;\n      }\n    }\n\n    this.dimensions = dimensionNames;\n    this._dimInfos = dimensionInfos;\n\n    this._initGetDimensionInfo(needsHasOwn);\n\n    this.hostModel = hostModel;\n    this._invertedIndicesMap = invertedIndicesMap;\n\n    if (this._dimOmitted) {\n      var dimIdxToName_1 = this._dimIdxToName = zrUtil.createHashMap();\n      zrUtil.each(dimensionNames, function (dimName) {\n        dimIdxToName_1.set(dimensionInfos[dimName].storeDimIndex, dimName);\n      });\n    }\n  }\n  /**\r\n   *\r\n   * Get concrete dimension name by dimension name or dimension index.\r\n   * If input a dimension name, do not validate whether the dimension name exits.\r\n   *\r\n   * @caution\r\n   * @param dim Must make sure the dimension is `SeriesDimensionLoose`.\r\n   * Because only those dimensions will have auto-generated dimension names if not\r\n   * have a user-specified name, and other dimensions will get a return of null/undefined.\r\n   *\r\n   * @notice Becuause of this reason, should better use `getDimensionIndex` instead, for examples:\r\n   * ```js\r\n   * const val = data.getStore().get(data.getDimensionIndex(dim), dataIdx);\r\n   * ```\r\n   *\r\n   * @return Concrete dim name.\r\n   */\n\n\n  SeriesData.prototype.getDimension = function (dim) {\n    var dimIdx = this._recognizeDimIndex(dim);\n\n    if (dimIdx == null) {\n      return dim;\n    }\n\n    dimIdx = dim;\n\n    if (!this._dimOmitted) {\n      return this.dimensions[dimIdx];\n    } // Retrieve from series dimension definition becuase it probably contains\n    // generated dimension name (like 'x', 'y').\n\n\n    var dimName = this._dimIdxToName.get(dimIdx);\n\n    if (dimName != null) {\n      return dimName;\n    }\n\n    var sourceDimDef = this._schema.getSourceDimension(dimIdx);\n\n    if (sourceDimDef) {\n      return sourceDimDef.name;\n    }\n  };\n  /**\r\n   * Get dimension index in data store. Return -1 if not found.\r\n   * Can be used to index value from getRawValue.\r\n   */\n\n\n  SeriesData.prototype.getDimensionIndex = function (dim) {\n    var dimIdx = this._recognizeDimIndex(dim);\n\n    if (dimIdx != null) {\n      return dimIdx;\n    }\n\n    if (dim == null) {\n      return -1;\n    }\n\n    var dimInfo = this._getDimInfo(dim);\n\n    return dimInfo ? dimInfo.storeDimIndex : this._dimOmitted ? this._schema.getSourceDimensionIndex(dim) : -1;\n  };\n  /**\r\n   * The meanings of the input parameter `dim`:\r\n   *\r\n   * + If dim is a number (e.g., `1`), it means the index of the dimension.\r\n   *   For example, `getDimension(0)` will return 'x' or 'lng' or 'radius'.\r\n   * + If dim is a number-like string (e.g., `\"1\"`):\r\n   *     + If there is the same concrete dim name defined in `series.dimensions` or `dataset.dimensions`,\r\n   *        it means that concrete name.\r\n   *     + If not, it will be converted to a number, which means the index of the dimension.\r\n   *        (why? because of the backward compatbility. We have been tolerating number-like string in\r\n   *        dimension setting, although now it seems that it is not a good idea.)\r\n   *     For example, `visualMap[i].dimension: \"1\"` is the same meaning as `visualMap[i].dimension: 1`,\r\n   *     if no dimension name is defined as `\"1\"`.\r\n   * + If dim is a not-number-like string, it means the concrete dim name.\r\n   *   For example, it can be be default name `\"x\"`, `\"y\"`, `\"z\"`, `\"lng\"`, `\"lat\"`, `\"angle\"`, `\"radius\"`,\r\n   *   or customized in `dimensions` property of option like `\"age\"`.\r\n   *\r\n   * @return recogonized `DimensionIndex`. Otherwise return null/undefined (means that dim is `DimensionName`).\r\n   */\n\n\n  SeriesData.prototype._recognizeDimIndex = function (dim) {\n    if (zrUtil.isNumber(dim) // If being a number-like string but not being defined as a dimension name.\n    || dim != null && !isNaN(dim) && !this._getDimInfo(dim) && (!this._dimOmitted || this._schema.getSourceDimensionIndex(dim) < 0)) {\n      return +dim;\n    }\n  };\n\n  SeriesData.prototype._getStoreDimIndex = function (dim) {\n    var dimIdx = this.getDimensionIndex(dim);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (dimIdx == null) {\n        throw new Error('Unkown dimension ' + dim);\n      }\n    }\n\n    return dimIdx;\n  };\n  /**\r\n   * Get type and calculation info of particular dimension\r\n   * @param dim\r\n   *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\r\n   *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\r\n   */\n\n\n  SeriesData.prototype.getDimensionInfo = function (dim) {\n    // Do not clone, because there may be categories in dimInfo.\n    return this._getDimInfo(this.getDimension(dim));\n  };\n\n  SeriesData.prototype._initGetDimensionInfo = function (needsHasOwn) {\n    var dimensionInfos = this._dimInfos;\n    this._getDimInfo = needsHasOwn ? function (dimName) {\n      return dimensionInfos.hasOwnProperty(dimName) ? dimensionInfos[dimName] : undefined;\n    } : function (dimName) {\n      return dimensionInfos[dimName];\n    };\n  };\n  /**\r\n   * concrete dimension name list on coord.\r\n   */\n\n\n  SeriesData.prototype.getDimensionsOnCoord = function () {\n    return this._dimSummary.dataDimsOnCoord.slice();\n  };\n\n  SeriesData.prototype.mapDimension = function (coordDim, idx) {\n    var dimensionsSummary = this._dimSummary;\n\n    if (idx == null) {\n      return dimensionsSummary.encodeFirstDimNotExtra[coordDim];\n    }\n\n    var dims = dimensionsSummary.encode[coordDim];\n    return dims ? dims[idx] : null;\n  };\n\n  SeriesData.prototype.mapDimensionsAll = function (coordDim) {\n    var dimensionsSummary = this._dimSummary;\n    var dims = dimensionsSummary.encode[coordDim];\n    return (dims || []).slice();\n  };\n\n  SeriesData.prototype.getStore = function () {\n    return this._store;\n  };\n  /**\r\n   * Initialize from data\r\n   * @param data source or data or data store.\r\n   * @param nameList The name of a datum is used on data diff and\r\n   *        default label/tooltip.\r\n   *        A name can be specified in encode.itemName,\r\n   *        or dataItem.name (only for series option data),\r\n   *        or provided in nameList from outside.\r\n   */\n\n\n  SeriesData.prototype.initData = function (data, nameList, dimValueGetter) {\n    var _this = this;\n\n    var store;\n\n    if (data instanceof DataStore) {\n      store = data;\n    }\n\n    if (!store) {\n      var dimensions = this.dimensions;\n      var provider = isSourceInstance(data) || zrUtil.isArrayLike(data) ? new DefaultDataProvider(data, dimensions.length) : data;\n      store = new DataStore();\n      var dimensionInfos = map(dimensions, function (dimName) {\n        return {\n          type: _this._dimInfos[dimName].type,\n          property: dimName\n        };\n      });\n      store.initData(provider, dimensionInfos, dimValueGetter);\n    }\n\n    this._store = store; // Reset\n\n    this._nameList = (nameList || []).slice();\n    this._idList = [];\n    this._nameRepeatCount = {};\n\n    this._doInit(0, store.count()); // Cache summary info for fast visit. See \"dimensionHelper\".\n    // Needs to be initialized after store is prepared.\n\n\n    this._dimSummary = summarizeDimensions(this, this._schema);\n    this.userOutput = this._dimSummary.userOutput;\n  };\n  /**\r\n   * Caution: Can be only called on raw data (before `this._indices` created).\r\n   */\n\n\n  SeriesData.prototype.appendData = function (data) {\n    var range = this._store.appendData(data);\n\n    this._doInit(range[0], range[1]);\n  };\n  /**\r\n   * Caution: Can be only called on raw data (before `this._indices` created).\r\n   * This method does not modify `rawData` (`dataProvider`), but only\r\n   * add values to store.\r\n   *\r\n   * The final count will be increased by `Math.max(values.length, names.length)`.\r\n   *\r\n   * @param values That is the SourceType: 'arrayRows', like\r\n   *        [\r\n   *            [12, 33, 44],\r\n   *            [NaN, 43, 1],\r\n   *            ['-', 'asdf', 0]\r\n   *        ]\r\n   *        Each item is exaclty cooresponding to a dimension.\r\n   */\n\n\n  SeriesData.prototype.appendValues = function (values, names) {\n    var _a = this._store.appendValues(values, names.length),\n        start = _a.start,\n        end = _a.end;\n\n    var shouldMakeIdFromName = this._shouldMakeIdFromName();\n\n    this._updateOrdinalMeta();\n\n    if (names) {\n      for (var idx = start; idx < end; idx++) {\n        var sourceIdx = idx - start;\n        this._nameList[idx] = names[sourceIdx];\n\n        if (shouldMakeIdFromName) {\n          makeIdFromName(this, idx);\n        }\n      }\n    }\n  };\n\n  SeriesData.prototype._updateOrdinalMeta = function () {\n    var store = this._store;\n    var dimensions = this.dimensions;\n\n    for (var i = 0; i < dimensions.length; i++) {\n      var dimInfo = this._dimInfos[dimensions[i]];\n\n      if (dimInfo.ordinalMeta) {\n        store.collectOrdinalMeta(dimInfo.storeDimIndex, dimInfo.ordinalMeta);\n      }\n    }\n  };\n\n  SeriesData.prototype._shouldMakeIdFromName = function () {\n    var provider = this._store.getProvider();\n\n    return this._idDimIdx == null && provider.getSource().sourceFormat !== SOURCE_FORMAT_TYPED_ARRAY && !provider.fillStorage;\n  };\n\n  SeriesData.prototype._doInit = function (start, end) {\n    if (start >= end) {\n      return;\n    }\n\n    var store = this._store;\n    var provider = store.getProvider();\n\n    this._updateOrdinalMeta();\n\n    var nameList = this._nameList;\n    var idList = this._idList;\n    var sourceFormat = provider.getSource().sourceFormat;\n    var isFormatOriginal = sourceFormat === SOURCE_FORMAT_ORIGINAL; // Each data item is value\n    // [1, 2]\n    // 2\n    // Bar chart, line chart which uses category axis\n    // only gives the 'y' value. 'x' value is the indices of category\n    // Use a tempValue to normalize the value to be a (x, y) value\n    // If dataItem is {name: ...} or {id: ...}, it has highest priority.\n    // This kind of ids and names are always stored `_nameList` and `_idList`.\n\n    if (isFormatOriginal && !provider.pure) {\n      var sharedDataItem = [];\n\n      for (var idx = start; idx < end; idx++) {\n        // NOTICE: Try not to write things into dataItem\n        var dataItem = provider.getItem(idx, sharedDataItem);\n\n        if (!this.hasItemOption && isDataItemOption(dataItem)) {\n          this.hasItemOption = true;\n        }\n\n        if (dataItem) {\n          var itemName = dataItem.name;\n\n          if (nameList[idx] == null && itemName != null) {\n            nameList[idx] = convertOptionIdName(itemName, null);\n          }\n\n          var itemId = dataItem.id;\n\n          if (idList[idx] == null && itemId != null) {\n            idList[idx] = convertOptionIdName(itemId, null);\n          }\n        }\n      }\n    }\n\n    if (this._shouldMakeIdFromName()) {\n      for (var idx = start; idx < end; idx++) {\n        makeIdFromName(this, idx);\n      }\n    }\n\n    prepareInvertedIndex(this);\n  };\n  /**\r\n   * PENDING: In fact currently this function is only used to short-circuit\r\n   * the calling of `scale.unionExtentFromData` when data have been filtered by modules\r\n   * like \"dataZoom\". `scale.unionExtentFromData` is used to calculate data extent for series on\r\n   * an axis, but if a \"axis related data filter module\" is used, the extent of the axis have\r\n   * been fixed and no need to calling `scale.unionExtentFromData` actually.\r\n   * But if we add \"custom data filter\" in future, which is not \"axis related\", this method may\r\n   * be still needed.\r\n   *\r\n   * Optimize for the scenario that data is filtered by a given extent.\r\n   * Consider that if data amount is more than hundreds of thousand,\r\n   * extent calculation will cost more than 10ms and the cache will\r\n   * be erased because of the filtering.\r\n   */\n\n\n  SeriesData.prototype.getApproximateExtent = function (dim) {\n    return this._approximateExtent[dim] || this._store.getDataExtent(this._getStoreDimIndex(dim));\n  };\n  /**\r\n   * Calculate extent on a filtered data might be time consuming.\r\n   * Approximate extent is only used for: calculte extent of filtered data outside.\r\n   */\n\n\n  SeriesData.prototype.setApproximateExtent = function (extent, dim) {\n    dim = this.getDimension(dim);\n    this._approximateExtent[dim] = extent.slice();\n  };\n\n  SeriesData.prototype.getCalculationInfo = function (key) {\n    return this._calculationInfo[key];\n  };\n\n  SeriesData.prototype.setCalculationInfo = function (key, value) {\n    isObject(key) ? zrUtil.extend(this._calculationInfo, key) : this._calculationInfo[key] = value;\n  };\n  /**\r\n   * @return Never be null/undefined. `number` will be converted to string. Becuase:\r\n   * In most cases, name is used in display, where returning a string is more convenient.\r\n   * In other cases, name is used in query (see `indexOfName`), where we can keep the\r\n   * rule that name `2` equals to name `'2'`.\r\n   */\n\n\n  SeriesData.prototype.getName = function (idx) {\n    var rawIndex = this.getRawIndex(idx);\n    var name = this._nameList[rawIndex];\n\n    if (name == null && this._nameDimIdx != null) {\n      name = getIdNameFromStore(this, this._nameDimIdx, rawIndex);\n    }\n\n    if (name == null) {\n      name = '';\n    }\n\n    return name;\n  };\n\n  SeriesData.prototype._getCategory = function (dimIdx, idx) {\n    var ordinal = this._store.get(dimIdx, idx);\n\n    var ordinalMeta = this._store.getOrdinalMeta(dimIdx);\n\n    if (ordinalMeta) {\n      return ordinalMeta.categories[ordinal];\n    }\n\n    return ordinal;\n  };\n  /**\r\n   * @return Never null/undefined. `number` will be converted to string. Becuase:\r\n   * In all cases having encountered at present, id is used in making diff comparison, which\r\n   * are usually based on hash map. We can keep the rule that the internal id are always string\r\n   * (treat `2` is the same as `'2'`) to make the related logic simple.\r\n   */\n\n\n  SeriesData.prototype.getId = function (idx) {\n    return getId(this, this.getRawIndex(idx));\n  };\n\n  SeriesData.prototype.count = function () {\n    return this._store.count();\n  };\n  /**\r\n   * Get value. Return NaN if idx is out of range.\r\n   *\r\n   * @notice Should better to use `data.getStore().get(dimIndex, dataIdx)` instead.\r\n   */\n\n\n  SeriesData.prototype.get = function (dim, idx) {\n    var store = this._store;\n    var dimInfo = this._dimInfos[dim];\n\n    if (dimInfo) {\n      return store.get(dimInfo.storeDimIndex, idx);\n    }\n  };\n  /**\r\n   * @notice Should better to use `data.getStore().getByRawIndex(dimIndex, dataIdx)` instead.\r\n   */\n\n\n  SeriesData.prototype.getByRawIndex = function (dim, rawIdx) {\n    var store = this._store;\n    var dimInfo = this._dimInfos[dim];\n\n    if (dimInfo) {\n      return store.getByRawIndex(dimInfo.storeDimIndex, rawIdx);\n    }\n  };\n\n  SeriesData.prototype.getIndices = function () {\n    return this._store.getIndices();\n  };\n\n  SeriesData.prototype.getDataExtent = function (dim) {\n    return this._store.getDataExtent(this._getStoreDimIndex(dim));\n  };\n\n  SeriesData.prototype.getSum = function (dim) {\n    return this._store.getSum(this._getStoreDimIndex(dim));\n  };\n\n  SeriesData.prototype.getMedian = function (dim) {\n    return this._store.getMedian(this._getStoreDimIndex(dim));\n  };\n\n  SeriesData.prototype.getValues = function (dimensions, idx) {\n    var _this = this;\n\n    var store = this._store;\n    return zrUtil.isArray(dimensions) ? store.getValues(map(dimensions, function (dim) {\n      return _this._getStoreDimIndex(dim);\n    }), idx) : store.getValues(dimensions);\n  };\n  /**\r\n   * If value is NaN. Inlcuding '-'\r\n   * Only check the coord dimensions.\r\n   */\n\n\n  SeriesData.prototype.hasValue = function (idx) {\n    var dataDimIndicesOnCoord = this._dimSummary.dataDimIndicesOnCoord;\n\n    for (var i = 0, len = dataDimIndicesOnCoord.length; i < len; i++) {\n      // Ordinal type originally can be string or number.\n      // But when an ordinal type is used on coord, it can\n      // not be string but only number. So we can also use isNaN.\n      if (isNaN(this._store.get(dataDimIndicesOnCoord[i], idx))) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Retreive the index with given name\r\n   */\n\n\n  SeriesData.prototype.indexOfName = function (name) {\n    for (var i = 0, len = this._store.count(); i < len; i++) {\n      if (this.getName(i) === name) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  SeriesData.prototype.getRawIndex = function (idx) {\n    return this._store.getRawIndex(idx);\n  };\n\n  SeriesData.prototype.indexOfRawIndex = function (rawIndex) {\n    return this._store.indexOfRawIndex(rawIndex);\n  };\n  /**\r\n   * Only support the dimension which inverted index created.\r\n   * Do not support other cases until required.\r\n   * @param dim concrete dim\r\n   * @param value ordinal index\r\n   * @return rawIndex\r\n   */\n\n\n  SeriesData.prototype.rawIndexOf = function (dim, value) {\n    var invertedIndices = dim && this._invertedIndicesMap[dim];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!invertedIndices) {\n        throw new Error('Do not supported yet');\n      }\n    }\n\n    var rawIndex = invertedIndices[value];\n\n    if (rawIndex == null || isNaN(rawIndex)) {\n      return INDEX_NOT_FOUND;\n    }\n\n    return rawIndex;\n  };\n  /**\r\n   * Retreive the index of nearest value\r\n   * @param dim\r\n   * @param value\r\n   * @param [maxDistance=Infinity]\r\n   * @return If and only if multiple indices has\r\n   *         the same value, they are put to the result.\r\n   */\n\n\n  SeriesData.prototype.indicesOfNearest = function (dim, value, maxDistance) {\n    return this._store.indicesOfNearest(this._getStoreDimIndex(dim), value, maxDistance);\n  };\n\n  SeriesData.prototype.each = function (dims, cb, ctx) {\n    'use strict';\n\n    if (zrUtil.isFunction(dims)) {\n      ctx = cb;\n      cb = dims;\n      dims = [];\n    } // ctxCompat just for compat echarts3\n\n\n    var fCtx = ctx || this;\n    var dimIndices = map(normalizeDimensions(dims), this._getStoreDimIndex, this);\n\n    this._store.each(dimIndices, fCtx ? zrUtil.bind(cb, fCtx) : cb);\n  };\n\n  SeriesData.prototype.filterSelf = function (dims, cb, ctx) {\n    'use strict';\n\n    if (zrUtil.isFunction(dims)) {\n      ctx = cb;\n      cb = dims;\n      dims = [];\n    } // ctxCompat just for compat echarts3\n\n\n    var fCtx = ctx || this;\n    var dimIndices = map(normalizeDimensions(dims), this._getStoreDimIndex, this);\n    this._store = this._store.filter(dimIndices, fCtx ? zrUtil.bind(cb, fCtx) : cb);\n    return this;\n  };\n  /**\r\n   * Select data in range. (For optimization of filter)\r\n   * (Manually inline code, support 5 million data filtering in data zoom.)\r\n   */\n\n\n  SeriesData.prototype.selectRange = function (range) {\n    'use strict';\n\n    var _this = this;\n\n    var innerRange = {};\n    var dims = zrUtil.keys(range);\n    var dimIndices = [];\n    zrUtil.each(dims, function (dim) {\n      var dimIdx = _this._getStoreDimIndex(dim);\n\n      innerRange[dimIdx] = range[dim];\n      dimIndices.push(dimIdx);\n    });\n    this._store = this._store.selectRange(innerRange);\n    return this;\n  };\n  /* eslint-enable max-len */\n\n\n  SeriesData.prototype.mapArray = function (dims, cb, ctx) {\n    'use strict';\n\n    if (zrUtil.isFunction(dims)) {\n      ctx = cb;\n      cb = dims;\n      dims = [];\n    } // ctxCompat just for compat echarts3\n\n\n    ctx = ctx || this;\n    var result = [];\n    this.each(dims, function () {\n      result.push(cb && cb.apply(this, arguments));\n    }, ctx);\n    return result;\n  };\n\n  SeriesData.prototype.map = function (dims, cb, ctx, ctxCompat) {\n    'use strict'; // ctxCompat just for compat echarts3\n\n    var fCtx = ctx || ctxCompat || this;\n    var dimIndices = map(normalizeDimensions(dims), this._getStoreDimIndex, this);\n    var list = cloneListForMapAndSample(this);\n    list._store = this._store.map(dimIndices, fCtx ? zrUtil.bind(cb, fCtx) : cb);\n    return list;\n  };\n\n  SeriesData.prototype.modify = function (dims, cb, ctx, ctxCompat) {\n    var _this = this; // ctxCompat just for compat echarts3\n\n\n    var fCtx = ctx || ctxCompat || this;\n\n    if (process.env.NODE_ENV !== 'production') {\n      zrUtil.each(normalizeDimensions(dims), function (dim) {\n        var dimInfo = _this.getDimensionInfo(dim);\n\n        if (!dimInfo.isCalculationCoord) {\n          console.error('Danger: only stack dimension can be modified');\n        }\n      });\n    }\n\n    var dimIndices = map(normalizeDimensions(dims), this._getStoreDimIndex, this); // If do shallow clone here, if there are too many stacked series,\n    // it still cost lots of memory, becuase `_store.dimensions` are not shared.\n    // We should consider there probably be shallow clone happen in each sereis\n    // in consequent filter/map.\n\n    this._store.modify(dimIndices, fCtx ? zrUtil.bind(cb, fCtx) : cb);\n  };\n  /**\r\n   * Large data down sampling on given dimension\r\n   * @param sampleIndex Sample index for name and id\r\n   */\n\n\n  SeriesData.prototype.downSample = function (dimension, rate, sampleValue, sampleIndex) {\n    var list = cloneListForMapAndSample(this);\n    list._store = this._store.downSample(this._getStoreDimIndex(dimension), rate, sampleValue, sampleIndex);\n    return list;\n  };\n  /**\r\n   * Large data down sampling using largest-triangle-three-buckets\r\n   * @param {string} valueDimension\r\n   * @param {number} targetCount\r\n   */\n\n\n  SeriesData.prototype.lttbDownSample = function (valueDimension, rate) {\n    var list = cloneListForMapAndSample(this);\n    list._store = this._store.lttbDownSample(this._getStoreDimIndex(valueDimension), rate);\n    return list;\n  };\n\n  SeriesData.prototype.getRawDataItem = function (idx) {\n    return this._store.getRawDataItem(idx);\n  };\n  /**\r\n   * Get model of one data item.\r\n   */\n  // TODO: Type of data item\n\n\n  SeriesData.prototype.getItemModel = function (idx) {\n    var hostModel = this.hostModel;\n    var dataItem = this.getRawDataItem(idx);\n    return new Model(dataItem, hostModel, hostModel && hostModel.ecModel);\n  };\n  /**\r\n   * Create a data differ\r\n   */\n\n\n  SeriesData.prototype.diff = function (otherList) {\n    var thisList = this;\n    return new DataDiffer(otherList ? otherList.getStore().getIndices() : [], this.getStore().getIndices(), function (idx) {\n      return getId(otherList, idx);\n    }, function (idx) {\n      return getId(thisList, idx);\n    });\n  };\n  /**\r\n   * Get visual property.\r\n   */\n\n\n  SeriesData.prototype.getVisual = function (key) {\n    var visual = this._visual;\n    return visual && visual[key];\n  };\n\n  SeriesData.prototype.setVisual = function (kvObj, val) {\n    this._visual = this._visual || {};\n\n    if (isObject(kvObj)) {\n      zrUtil.extend(this._visual, kvObj);\n    } else {\n      this._visual[kvObj] = val;\n    }\n  };\n  /**\r\n   * Get visual property of single data item\r\n   */\n  // eslint-disable-next-line\n\n\n  SeriesData.prototype.getItemVisual = function (idx, key) {\n    var itemVisual = this._itemVisuals[idx];\n    var val = itemVisual && itemVisual[key];\n\n    if (val == null) {\n      // Use global visual property\n      return this.getVisual(key);\n    }\n\n    return val;\n  };\n  /**\r\n   * If exists visual property of single data item\r\n   */\n\n\n  SeriesData.prototype.hasItemVisual = function () {\n    return this._itemVisuals.length > 0;\n  };\n  /**\r\n   * Make sure itemVisual property is unique\r\n   */\n  // TODO: use key to save visual to reduce memory.\n\n\n  SeriesData.prototype.ensureUniqueItemVisual = function (idx, key) {\n    var itemVisuals = this._itemVisuals;\n    var itemVisual = itemVisuals[idx];\n\n    if (!itemVisual) {\n      itemVisual = itemVisuals[idx] = {};\n    }\n\n    var val = itemVisual[key];\n\n    if (val == null) {\n      val = this.getVisual(key); // TODO Performance?\n\n      if (zrUtil.isArray(val)) {\n        val = val.slice();\n      } else if (isObject(val)) {\n        val = zrUtil.extend({}, val);\n      }\n\n      itemVisual[key] = val;\n    }\n\n    return val;\n  }; // eslint-disable-next-line\n\n\n  SeriesData.prototype.setItemVisual = function (idx, key, value) {\n    var itemVisual = this._itemVisuals[idx] || {};\n    this._itemVisuals[idx] = itemVisual;\n\n    if (isObject(key)) {\n      zrUtil.extend(itemVisual, key);\n    } else {\n      itemVisual[key] = value;\n    }\n  };\n  /**\r\n   * Clear itemVisuals and list visual.\r\n   */\n\n\n  SeriesData.prototype.clearAllVisual = function () {\n    this._visual = {};\n    this._itemVisuals = [];\n  };\n\n  SeriesData.prototype.setLayout = function (key, val) {\n    isObject(key) ? zrUtil.extend(this._layout, key) : this._layout[key] = val;\n  };\n  /**\r\n   * Get layout property.\r\n   */\n\n\n  SeriesData.prototype.getLayout = function (key) {\n    return this._layout[key];\n  };\n  /**\r\n   * Get layout of single data item\r\n   */\n\n\n  SeriesData.prototype.getItemLayout = function (idx) {\n    return this._itemLayouts[idx];\n  };\n  /**\r\n   * Set layout of single data item\r\n   */\n\n\n  SeriesData.prototype.setItemLayout = function (idx, layout, merge) {\n    this._itemLayouts[idx] = merge ? zrUtil.extend(this._itemLayouts[idx] || {}, layout) : layout;\n  };\n  /**\r\n   * Clear all layout of single data item\r\n   */\n\n\n  SeriesData.prototype.clearItemLayouts = function () {\n    this._itemLayouts.length = 0;\n  };\n  /**\r\n   * Set graphic element relative to data. It can be set as null\r\n   */\n\n\n  SeriesData.prototype.setItemGraphicEl = function (idx, el) {\n    var seriesIndex = this.hostModel && this.hostModel.seriesIndex;\n    setCommonECData(seriesIndex, this.dataType, idx, el);\n    this._graphicEls[idx] = el;\n  };\n\n  SeriesData.prototype.getItemGraphicEl = function (idx) {\n    return this._graphicEls[idx];\n  };\n\n  SeriesData.prototype.eachItemGraphicEl = function (cb, context) {\n    zrUtil.each(this._graphicEls, function (el, idx) {\n      if (el) {\n        cb && cb.call(context, el, idx);\n      }\n    });\n  };\n  /**\r\n   * Shallow clone a new list except visual and layout properties, and graph elements.\r\n   * New list only change the indices.\r\n   */\n\n\n  SeriesData.prototype.cloneShallow = function (list) {\n    if (!list) {\n      list = new SeriesData(this._schema ? this._schema : map(this.dimensions, this._getDimInfo, this), this.hostModel);\n    }\n\n    transferProperties(list, this);\n    list._store = this._store;\n    return list;\n  };\n  /**\r\n   * Wrap some method to add more feature\r\n   */\n\n\n  SeriesData.prototype.wrapMethod = function (methodName, injectFunction) {\n    var originalMethod = this[methodName];\n\n    if (!zrUtil.isFunction(originalMethod)) {\n      return;\n    }\n\n    this.__wrappedMethods = this.__wrappedMethods || [];\n\n    this.__wrappedMethods.push(methodName);\n\n    this[methodName] = function () {\n      var res = originalMethod.apply(this, arguments);\n      return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));\n    };\n  }; // ----------------------------------------------------------\n  // A work around for internal method visiting private member.\n  // ----------------------------------------------------------\n\n\n  SeriesData.internalField = function () {\n    prepareInvertedIndex = function (data) {\n      var invertedIndicesMap = data._invertedIndicesMap;\n      zrUtil.each(invertedIndicesMap, function (invertedIndices, dim) {\n        var dimInfo = data._dimInfos[dim]; // Currently, only dimensions that has ordinalMeta can create inverted indices.\n\n        var ordinalMeta = dimInfo.ordinalMeta;\n        var store = data._store;\n\n        if (ordinalMeta) {\n          invertedIndices = invertedIndicesMap[dim] = new CtorInt32Array(ordinalMeta.categories.length); // The default value of TypedArray is 0. To avoid miss\n          // mapping to 0, we should set it as INDEX_NOT_FOUND.\n\n          for (var i = 0; i < invertedIndices.length; i++) {\n            invertedIndices[i] = INDEX_NOT_FOUND;\n          }\n\n          for (var i = 0; i < store.count(); i++) {\n            // Only support the case that all values are distinct.\n            invertedIndices[store.get(dimInfo.storeDimIndex, i)] = i;\n          }\n        }\n      });\n    };\n\n    getIdNameFromStore = function (data, dimIdx, idx) {\n      return convertOptionIdName(data._getCategory(dimIdx, idx), null);\n    };\n    /**\r\n     * @see the comment of `List['getId']`.\r\n     */\n\n\n    getId = function (data, rawIndex) {\n      var id = data._idList[rawIndex];\n\n      if (id == null && data._idDimIdx != null) {\n        id = getIdNameFromStore(data, data._idDimIdx, rawIndex);\n      }\n\n      if (id == null) {\n        id = ID_PREFIX + rawIndex;\n      }\n\n      return id;\n    };\n\n    normalizeDimensions = function (dimensions) {\n      if (!zrUtil.isArray(dimensions)) {\n        dimensions = dimensions != null ? [dimensions] : [];\n      }\n\n      return dimensions;\n    };\n    /**\r\n     * Data in excludeDimensions is copied, otherwise transfered.\r\n     */\n\n\n    cloneListForMapAndSample = function (original) {\n      var list = new SeriesData(original._schema ? original._schema : map(original.dimensions, original._getDimInfo, original), original.hostModel); // FIXME If needs stackedOn, value may already been stacked\n\n      transferProperties(list, original);\n      return list;\n    };\n\n    transferProperties = function (target, source) {\n      zrUtil.each(TRANSFERABLE_PROPERTIES.concat(source.__wrappedMethods || []), function (propName) {\n        if (source.hasOwnProperty(propName)) {\n          target[propName] = source[propName];\n        }\n      });\n      target.__wrappedMethods = source.__wrappedMethods;\n      zrUtil.each(CLONE_PROPERTIES, function (propName) {\n        target[propName] = zrUtil.clone(source[propName]);\n      });\n      target._calculationInfo = zrUtil.extend({}, source._calculationInfo);\n    };\n\n    makeIdFromName = function (data, idx) {\n      var nameList = data._nameList;\n      var idList = data._idList;\n      var nameDimIdx = data._nameDimIdx;\n      var idDimIdx = data._idDimIdx;\n      var name = nameList[idx];\n      var id = idList[idx];\n\n      if (name == null && nameDimIdx != null) {\n        nameList[idx] = name = getIdNameFromStore(data, nameDimIdx, idx);\n      }\n\n      if (id == null && idDimIdx != null) {\n        idList[idx] = id = getIdNameFromStore(data, idDimIdx, idx);\n      }\n\n      if (id == null && name != null) {\n        var nameRepeatCount = data._nameRepeatCount;\n        var nmCnt = nameRepeatCount[name] = (nameRepeatCount[name] || 0) + 1;\n        id = name;\n\n        if (nmCnt > 1) {\n          id += '__ec__' + nmCnt;\n        }\n\n        idList[idx] = id;\n      }\n    };\n  }();\n\n  return SeriesData;\n}();\n\nexport default SeriesData;", "import windingLine from './windingLine.js';\nvar EPSILON = 1e-8;\nfunction isAroundEqual(a, b) {\n    return Math.abs(a - b) < EPSILON;\n}\nexport function contain(points, x, y) {\n    var w = 0;\n    var p = points[0];\n    if (!p) {\n        return false;\n    }\n    for (var i = 1; i < points.length; i++) {\n        var p2 = points[i];\n        w += windingLine(p[0], p[1], p2[0], p2[1], x, y);\n        p = p2;\n    }\n    var p0 = points[0];\n    if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {\n        w += windingLine(p[0], p[1], p0[0], p0[1], x, y);\n    }\n    return w !== 0;\n}\n", "\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport { __extends } from \"tslib\";\nimport BoundingRect from 'zrender/lib/core/BoundingRect.js';\nimport * as vec2 from 'zrender/lib/core/vector.js';\nimport * as polygonContain from 'zrender/lib/contain/polygon.js';\nimport * as matrix from 'zrender/lib/core/matrix.js';\nimport { each } from 'zrender/lib/core/util.js';\nvar TMP_TRANSFORM = [];\n\nfunction transformPoints(points, transform) {\n  for (var p = 0; p < points.length; p++) {\n    vec2.applyTransform(points[p], points[p], transform);\n  }\n}\n\nfunction updateBBoxFromPoints(points, min, max, projection) {\n  for (var i = 0; i < points.length; i++) {\n    var p = points[i];\n\n    if (projection) {\n      // projection may return null point.\n      p = projection.project(p);\n    }\n\n    if (p && isFinite(p[0]) && isFinite(p[1])) {\n      vec2.min(min, min, p);\n      vec2.max(max, max, p);\n    }\n  }\n}\n\nfunction centroid(points) {\n  var signedArea = 0;\n  var cx = 0;\n  var cy = 0;\n  var len = points.length;\n  var x0 = points[len - 1][0];\n  var y0 = points[len - 1][1]; // Polygon should been closed.\n\n  for (var i = 0; i < len; i++) {\n    var x1 = points[i][0];\n    var y1 = points[i][1];\n    var a = x0 * y1 - x1 * y0;\n    signedArea += a;\n    cx += (x0 + x1) * a;\n    cy += (y0 + y1) * a;\n    x0 = x1;\n    y0 = y1;\n  }\n\n  return signedArea ? [cx / signedArea / 3, cy / signedArea / 3, signedArea] : [points[0][0] || 0, points[0][1] || 0];\n}\n\nvar Region =\n/** @class */\nfunction () {\n  function Region(name) {\n    this.name = name;\n  }\n\n  Region.prototype.setCenter = function (center) {\n    this._center = center;\n  };\n  /**\r\n   * Get center point in data unit. That is,\r\n   * for GeoJSONRegion, the unit is lat/lng,\r\n   * for GeoSVGRegion, the unit is SVG local coord.\r\n   */\n\n\n  Region.prototype.getCenter = function () {\n    var center = this._center;\n\n    if (!center) {\n      // In most cases there are no need to calculate this center.\n      // So calculate only when called.\n      center = this._center = this.calcCenter();\n    }\n\n    return center;\n  };\n\n  return Region;\n}();\n\nexport { Region };\n\nvar GeoJSONPolygonGeometry =\n/** @class */\nfunction () {\n  function GeoJSONPolygonGeometry(exterior, interiors) {\n    this.type = 'polygon';\n    this.exterior = exterior;\n    this.interiors = interiors;\n  }\n\n  return GeoJSONPolygonGeometry;\n}();\n\nexport { GeoJSONPolygonGeometry };\n\nvar GeoJSONLineStringGeometry =\n/** @class */\nfunction () {\n  function GeoJSONLineStringGeometry(points) {\n    this.type = 'linestring';\n    this.points = points;\n  }\n\n  return GeoJSONLineStringGeometry;\n}();\n\nexport { GeoJSONLineStringGeometry };\n\nvar GeoJSONRegion =\n/** @class */\nfunction (_super) {\n  __extends(GeoJSONRegion, _super);\n\n  function GeoJSONRegion(name, geometries, cp) {\n    var _this = _super.call(this, name) || this;\n\n    _this.type = 'geoJSON';\n    _this.geometries = geometries;\n    _this._center = cp && [cp[0], cp[1]];\n    return _this;\n  }\n\n  GeoJSONRegion.prototype.calcCenter = function () {\n    var geometries = this.geometries;\n    var largestGeo;\n    var largestGeoSize = 0;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geo = geometries[i];\n      var exterior = geo.exterior; // Simple trick to use points count instead of polygon area as region size.\n      // Ignore linestring\n\n      var size = exterior && exterior.length;\n\n      if (size > largestGeoSize) {\n        largestGeo = geo;\n        largestGeoSize = size;\n      }\n    }\n\n    if (largestGeo) {\n      return centroid(largestGeo.exterior);\n    } // from bounding rect by default.\n\n\n    var rect = this.getBoundingRect();\n    return [rect.x + rect.width / 2, rect.y + rect.height / 2];\n  };\n\n  GeoJSONRegion.prototype.getBoundingRect = function (projection) {\n    var rect = this._rect; // Always recalculate if using projection.\n\n    if (rect && !projection) {\n      return rect;\n    }\n\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n    var geometries = this.geometries;\n    each(geometries, function (geo) {\n      if (geo.type === 'polygon') {\n        // Doesn't consider hole\n        updateBBoxFromPoints(geo.exterior, min, max, projection);\n      } else {\n        each(geo.points, function (points) {\n          updateBBoxFromPoints(points, min, max, projection);\n        });\n      }\n    }); // Normalie invalid bounding.\n\n    if (!(isFinite(min[0]) && isFinite(min[1]) && isFinite(max[0]) && isFinite(max[1]))) {\n      min[0] = min[1] = max[0] = max[1] = 0;\n    }\n\n    rect = new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n\n    if (!projection) {\n      this._rect = rect;\n    }\n\n    return rect;\n  };\n\n  GeoJSONRegion.prototype.contain = function (coord) {\n    var rect = this.getBoundingRect();\n    var geometries = this.geometries;\n\n    if (!rect.contain(coord[0], coord[1])) {\n      return false;\n    }\n\n    loopGeo: for (var i = 0, len = geometries.length; i < len; i++) {\n      var geo = geometries[i]; // Only support polygon.\n\n      if (geo.type !== 'polygon') {\n        continue;\n      }\n\n      var exterior = geo.exterior;\n      var interiors = geo.interiors;\n\n      if (polygonContain.contain(exterior, coord[0], coord[1])) {\n        // Not in the region if point is in the hole.\n        for (var k = 0; k < (interiors ? interiors.length : 0); k++) {\n          if (polygonContain.contain(interiors[k], coord[0], coord[1])) {\n            continue loopGeo;\n          }\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Transform the raw coords to target bounding.\r\n   * @param x\r\n   * @param y\r\n   * @param width\r\n   * @param height\r\n   */\n\n\n  GeoJSONRegion.prototype.transformTo = function (x, y, width, height) {\n    var rect = this.getBoundingRect();\n    var aspect = rect.width / rect.height;\n\n    if (!width) {\n      width = aspect * height;\n    } else if (!height) {\n      height = width / aspect;\n    }\n\n    var target = new BoundingRect(x, y, width, height);\n    var transform = rect.calculateTransform(target);\n    var geometries = this.geometries;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geo = geometries[i];\n\n      if (geo.type === 'polygon') {\n        transformPoints(geo.exterior, transform);\n        each(geo.interiors, function (interior) {\n          transformPoints(interior, transform);\n        });\n      } else {\n        each(geo.points, function (points) {\n          transformPoints(points, transform);\n        });\n      }\n    }\n\n    rect = this._rect;\n    rect.copy(target); // Update center\n\n    this._center = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n  };\n\n  GeoJSONRegion.prototype.cloneShallow = function (name) {\n    name == null && (name = this.name);\n    var newRegion = new GeoJSONRegion(name, this.geometries, this._center);\n    newRegion._rect = this._rect;\n    newRegion.transformTo = null; // Simply avoid to be called.\n\n    return newRegion;\n  };\n\n  return GeoJSONRegion;\n}(Region);\n\nexport { GeoJSONRegion };\n\nvar GeoSVGRegion =\n/** @class */\nfunction (_super) {\n  __extends(GeoSVGRegion, _super);\n\n  function GeoSVGRegion(name, elOnlyForCalculate) {\n    var _this = _super.call(this, name) || this;\n\n    _this.type = 'geoSVG';\n    _this._elOnlyForCalculate = elOnlyForCalculate;\n    return _this;\n  }\n\n  GeoSVGRegion.prototype.calcCenter = function () {\n    var el = this._elOnlyForCalculate;\n    var rect = el.getBoundingRect();\n    var center = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n    var mat = matrix.identity(TMP_TRANSFORM);\n    var target = el;\n\n    while (target && !target.isGeoSVGGraphicRoot) {\n      matrix.mul(mat, target.getLocalTransform(), mat);\n      target = target.parent;\n    }\n\n    matrix.invert(mat, mat);\n    vec2.applyTransform(center, center, mat);\n    return center;\n  };\n\n  return GeoSVGRegion;\n}(Region);\n\nexport { GeoSVGRegion };", "\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * Parse and decode geo json\r\n */\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport { GeoJSONLineStringGeometry, GeoJSONPolygonGeometry, GeoJSONRegion } from './Region.js';\n\nfunction decode(json) {\n  if (!json.UTF8Encoding) {\n    return json;\n  }\n\n  var jsonCompressed = json;\n  var encodeScale = jsonCompressed.UTF8Scale;\n\n  if (encodeScale == null) {\n    encodeScale = 1024;\n  }\n\n  var features = jsonCompressed.features;\n  zrUtil.each(features, function (feature) {\n    var geometry = feature.geometry;\n    var encodeOffsets = geometry.encodeOffsets;\n    var coordinates = geometry.coordinates; // Geometry may be appeded manually in the script after json loaded.\n    // In this case this geometry is usually not encoded.\n\n    if (!encodeOffsets) {\n      return;\n    }\n\n    switch (geometry.type) {\n      case 'LineString':\n        geometry.coordinates = decodeRing(coordinates, encodeOffsets, encodeScale);\n        break;\n\n      case 'Polygon':\n        decodeRings(coordinates, encodeOffsets, encodeScale);\n        break;\n\n      case 'MultiLineString':\n        decodeRings(coordinates, encodeOffsets, encodeScale);\n        break;\n\n      case 'MultiPolygon':\n        zrUtil.each(coordinates, function (rings, idx) {\n          return decodeRings(rings, encodeOffsets[idx], encodeScale);\n        });\n    }\n  }); // Has been decoded\n\n  jsonCompressed.UTF8Encoding = false;\n  return jsonCompressed;\n}\n\nfunction decodeRings(rings, encodeOffsets, encodeScale) {\n  for (var c = 0; c < rings.length; c++) {\n    rings[c] = decodeRing(rings[c], encodeOffsets[c], encodeScale);\n  }\n}\n\nfunction decodeRing(coordinate, encodeOffsets, encodeScale) {\n  var result = [];\n  var prevX = encodeOffsets[0];\n  var prevY = encodeOffsets[1];\n\n  for (var i = 0; i < coordinate.length; i += 2) {\n    var x = coordinate.charCodeAt(i) - 64;\n    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding\n\n    x = x >> 1 ^ -(x & 1);\n    y = y >> 1 ^ -(y & 1); // Delta deocding\n\n    x += prevX;\n    y += prevY;\n    prevX = x;\n    prevY = y; // Dequantize\n\n    result.push([x / encodeScale, y / encodeScale]);\n  }\n\n  return result;\n}\n\nexport default function parseGeoJSON(geoJson, nameProperty) {\n  geoJson = decode(geoJson);\n  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {\n    // Output of mapshaper may have geometry null\n    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;\n  }), function (featureObj) {\n    var properties = featureObj.properties;\n    var geo = featureObj.geometry;\n    var geometries = [];\n\n    switch (geo.type) {\n      case 'Polygon':\n        var coordinates = geo.coordinates; // According to the GeoJSON specification.\n        // First must be exterior, and the rest are all interior(holes).\n\n        geometries.push(new GeoJSONPolygonGeometry(coordinates[0], coordinates.slice(1)));\n        break;\n\n      case 'MultiPolygon':\n        zrUtil.each(geo.coordinates, function (item) {\n          if (item[0]) {\n            geometries.push(new GeoJSONPolygonGeometry(item[0], item.slice(1)));\n          }\n        });\n        break;\n\n      case 'LineString':\n        geometries.push(new GeoJSONLineStringGeometry([geo.coordinates]));\n        break;\n\n      case 'MultiLineString':\n        geometries.push(new GeoJSONLineStringGeometry(geo.coordinates));\n    }\n\n    var region = new GeoJSONRegion(properties[nameProperty || 'name'], geometries, properties.cp);\n    region.properties = properties;\n    return region;\n  });\n}"],
  "mappings": "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",
  "names": ["DataDiffer", "map", "DimensionUserOuput", "SeriesDimensionDefine", "isObject", "map", "SeriesData", "min", "max", "Region", "GeoJSONPolygonGeometry", "GeoJSONLineStringGeometry", "GeoJSONRegion", "min", "max", "GeoSVGRegion"]
}
